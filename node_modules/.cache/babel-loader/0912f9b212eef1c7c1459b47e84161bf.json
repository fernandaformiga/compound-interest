{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Documents/bootcamp fullstack/modulo 3/comp-int-calc/src/App.js\";\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport Form from './components/Form.js';\nimport Installments from './components/Installments.js';\nexport default function App() {\n  const [initialValue, setInitialValue] = useState(1000);\n  const [monthlyInterest, setMonthlyInterest] = useState(1);\n  const [monthlyPeriod, setMonthlyPeriod] = useState(1);\n  const [installments, setInstallments] = useState([]);\n  useEffect(() => {\n    calculateInterest(initialValue, monthlyInterest, monthlyPeriod);\n  }, [initialValue, monthlyInterest, monthlyPeriod]);\n\n  const calculateInterest = (initialValue, monthlyInterest, monthlyPeriod) => {\n    const newInstallments = [];\n    let currentId = 1;\n    let currentValue = initialValue;\n    let percentage = 0;\n\n    for (let i = 1; i <= monthlyPeriod; i++) {\n      const percentValue = currentValue * Math.abs(monthlyInterest) / 100; //absolute value\n\n      currentValue = monthlyInterest >= 0 ? currentValue + percentValue //if it adds to the value\n      : currentValue - percentValue; // if it removes from the value\n\n      percentage = (currentValue / initialValue - 1) * 100;\n      newInstallments.push({\n        id: currentId++,\n        value: currentValue,\n        difference: currentValue - initialValue,\n        percentage,\n        profit: monthlyInterest > 0\n      });\n    }\n\n    setInstallments(newInstallments);\n  };\n\n  const handleChangeData = (newValue, newInterest, newPeriod) => {\n    if (newValue !== null) {\n      setInitialValue(newValue);\n      return;\n    }\n\n    if (newInterest !== null) {\n      setMonthlyInterest(newInterest);\n      return;\n    }\n\n    setMonthlyPeriod(newPeriod);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Juros Compostos\"), /*#__PURE__*/React.createElement(Form, {\n    data: {\n      initialValue,\n      monthlyInterest,\n      monthlyPeriod\n    },\n    onChangeData: handleChangeData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Installments, {\n    data: installments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/macbook/Documents/bootcamp fullstack/modulo 3/comp-int-calc/src/App.js"],"names":["React","useState","useEffect","Form","Installments","App","initialValue","setInitialValue","monthlyInterest","setMonthlyInterest","monthlyPeriod","setMonthlyPeriod","installments","setInstallments","calculateInterest","newInstallments","currentId","currentValue","percentage","i","percentValue","Math","abs","push","id","value","difference","profit","handleChangeData","newValue","newInterest","newPeriod"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport Form from './components/Form.js';\nimport Installments from './components/Installments.js';\n\nexport default function App() {\n  const [initialValue, setInitialValue] = useState(1000);\n  const [monthlyInterest, setMonthlyInterest] = useState(1);\n  const [monthlyPeriod, setMonthlyPeriod] = useState(1);\n  const [installments, setInstallments] = useState([]);\n\n  useEffect(() => {\n    calculateInterest(initialValue, monthlyInterest, monthlyPeriod);\n  }, [initialValue, monthlyInterest, monthlyPeriod]);\n\n  const calculateInterest = (initialValue, monthlyInterest, monthlyPeriod) => {\n    const newInstallments = [];\n    let currentId = 1;\n    let currentValue = initialValue;\n    let percentage = 0;\n\n    for (let i = 1; i <= monthlyPeriod; i++) {\n      const percentValue = (currentValue * Math.abs(monthlyInterest)) / 100; //absolute value\n\n      currentValue =\n        monthlyInterest >= 0\n          ? currentValue + percentValue //if it adds to the value\n          : currentValue - percentValue; // if it removes from the value\n\n      percentage = (currentValue / initialValue - 1) * 100;\n\n      newInstallments.push({\n        id: currentId++,\n        value: currentValue,\n        difference: currentValue - initialValue,\n        percentage,\n        profit: monthlyInterest > 0,\n      });\n    }\n\n    setInstallments(newInstallments);\n  };\n\n  const handleChangeData = (newValue, newInterest, newPeriod) => {\n    if (newValue !== null) {\n      setInitialValue(newValue);\n      return;\n    }\n\n    if (newInterest !== null) {\n      setMonthlyInterest(newInterest);\n      return;\n    }\n\n    setMonthlyPeriod(newPeriod);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"center\">Juros Compostos</h1>\n\n      <Form\n        data={{ initialValue, monthlyInterest, monthlyPeriod }}\n        onChangeData={handleChangeData}\n      />\n      <Installments data={installments} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}