{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Documents/bootcamp fullstack/modulo 3/compound-interest-calc/comp-int-calc/src/App.js\";\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nexport default function App() {\n  const [initialValue, setInitialValue] = useState(1000);\n  const [monthlyInterest, setMonthlyInterest] = useState(1);\n  const [monthlyPeriod, setMonthlyPeriod] = useState(1000);\n  const [installments, setInstallments] = useState(1000);\n  useEffect(() => {\n    calculateInterest(initialValue, monthlyInterest, monthlyPeriod);\n  }, [initialValue, monthlyInterest, monthlyPeriod]);\n\n  const calculateInterest = (initialValue, monthlyInterest, monthlyPeriod) => {\n    const newInstallments = [];\n    let currentId = 1;\n    let currentValue = initialValue;\n    let percentage = 0;\n\n    for (let i = 1; i <= monthlyPeriod; i++) {\n      const percentValue = currentValue * monthlyInterest / 100;\n      currentValue = monthlyInterest >= 0 ? currentValue + percentValue : currentValue = percentValue;\n      percentage = (currentValue / initialValue - 1) * 100;\n      newInstallments.push({\n        id: currentId++,\n        value: currentValue,\n        difference: currentValue - initialValue,\n        percentage,\n        profit: monthlyInterest > 0\n      });\n    }\n\n    setInstallments(newInstallments);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Juros Compostos\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/macbook/Documents/bootcamp fullstack/modulo 3/compound-interest-calc/comp-int-calc/src/App.js"],"names":["React","useState","useEffect","App","initialValue","setInitialValue","monthlyInterest","setMonthlyInterest","monthlyPeriod","setMonthlyPeriod","installments","setInstallments","calculateInterest","newInstallments","currentId","currentValue","percentage","i","percentValue","push","id","value","difference","profit"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,IAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,iBAAiB,CAACR,YAAD,EAAeE,eAAf,EAAgCE,aAAhC,CAAjB;AACD,GAFQ,EAEN,CAACJ,YAAD,EAAeE,eAAf,EAAgCE,aAAhC,CAFM,CAAT;;AAIA,QAAMI,iBAAiB,GAAG,CAACR,YAAD,EAAeE,eAAf,EAAgCE,aAAhC,KAAkD;AAC1E,UAAMK,eAAe,GAAG,EAAxB;AACA,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAIC,YAAY,GAAGX,YAAnB;AACA,QAAIY,UAAU,GAAG,CAAjB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIT,aAArB,EAAoCS,CAAC,EAArC,EAAyC;AACvC,YAAMC,YAAY,GAAIH,YAAY,GAAGT,eAAhB,GAAmC,GAAxD;AAEAS,MAAAA,YAAY,GACVT,eAAe,IAAI,CAAnB,GACIS,YAAY,GAAGG,YADnB,GAEKH,YAAY,GAAGG,YAHtB;AAKAF,MAAAA,UAAU,GAAG,CAACD,YAAY,GAAGX,YAAf,GAA8B,CAA/B,IAAoC,GAAjD;AACAS,MAAAA,eAAe,CAACM,IAAhB,CAAqB;AACnBC,QAAAA,EAAE,EAAEN,SAAS,EADM;AAEnBO,QAAAA,KAAK,EAAEN,YAFY;AAGnBO,QAAAA,UAAU,EAAEP,YAAY,GAAGX,YAHR;AAInBY,QAAAA,UAJmB;AAKnBO,QAAAA,MAAM,EAAEjB,eAAe,GAAG;AALP,OAArB;AAOD;;AAEDK,IAAAA,eAAe,CAACE,eAAD,CAAf;AACD,GAzBD;;AA2BA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD","sourcesContent":["import React, { useState } from 'react';\nimport { useEffect } from 'react';\n\nexport default function App() {\n  const [initialValue, setInitialValue] = useState(1000);\n  const [monthlyInterest, setMonthlyInterest] = useState(1);\n  const [monthlyPeriod, setMonthlyPeriod] = useState(1000);\n  const [installments, setInstallments] = useState(1000);\n\n  useEffect(() => {\n    calculateInterest(initialValue, monthlyInterest, monthlyPeriod);\n  }, [initialValue, monthlyInterest, monthlyPeriod]);\n\n  const calculateInterest = (initialValue, monthlyInterest, monthlyPeriod) => {\n    const newInstallments = [];\n    let currentId = 1;\n    let currentValue = initialValue;\n    let percentage = 0;\n\n    for (let i = 1; i <= monthlyPeriod; i++) {\n      const percentValue = (currentValue * monthlyInterest) / 100;\n\n      currentValue =\n        monthlyInterest >= 0\n          ? currentValue + percentValue\n          : (currentValue = percentValue);\n\n      percentage = (currentValue / initialValue - 1) * 100;\n      newInstallments.push({\n        id: currentId++,\n        value: currentValue,\n        difference: currentValue - initialValue,\n        percentage,\n        profit: monthlyInterest > 0,\n      });\n    }\n\n    setInstallments(newInstallments);\n  };\n\n  return (\n    <div>\n      <h1>Juros Compostos</h1>\n\n      <form />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}